<?php
/**
 * Created by PhpStorm.
 * User: ashima
 * Date: 19/1/17
 * Time: 3:05 PM
 */

namespace MyApp\controllers;

use Diff\Differ\MapDiffer;
use GuzzleHttp;
use MyApp\components\HTTPStatus;
use MyApp\helpers\ArticleHelper;
use MyApp\helpers\JsonData;
use MyApp\helpers\PitchVisionUtils;
use MyApp\request\ArticleRequest;
use MyApp\request\TestRequest;
use MyApp\Slim;
use MyApp\TreeWalker;

/**
 * Class ArticleController
 * @package MyApp\controllers
 */
class ArticleController extends Controller {

	protected $helper;

	function __construct(Slim $app) {
		$this->helper = ArticleHelper::getInstance();
		parent::__construct($app); // TODO: Change the autogenerated stub
	}

	function routes() {
		$this->app->get('/article/find/:id', $this->validate((new TestRequest())->anotherRules()),
			[$this, 'getArticle'])->name("find")
		;
		$this->app->get('/article/findall', [$this, 'getArticles'])->name("findAll");
		$this->app->get('/article/diff/:flag', [$this, 'findDiff'])->name("findDiff");

		$this->app->post('/article/create', $this->validate(ArticleRequest::creatingRule()),
			[$this, 'createArticle'])->name("create")
		;
		$this->app->post('/article/diff', [$this, 'createDiff'])->name("creatediff");
		$this->app->put('/article/update/:id', $this->validate(ArticleRequest::updatingRules()),
			[$this, 'updateArticle'])->name("update")
		;
		$this->app->delete('/article/delete/:id', [$this, 'deleteArticle'])->name("Delete Article");
	}

	public function read() {
		$this->app->getLog()->emergency("OOP");
		print_r($this->app->router->getCurrentRoute()->getParams());
		echo "You are in read of demo. Your app name is :" . $this->app->getName();
		$this->app->urlFor("find", ['id' => 'abcd']);
	}

	public function getArticle() {
		try {
			$article = $this->helper->findArticle($this->app->router->getCurrentRoute()->getParam('id'));
			$responseStatus = HTTPStatus::HTTP_STATUS_NO_CONTENT;

			if ($article) {
				$responseStatus = HTTPStatus::HTTP_STATUS_OK;
				$this->response->setData($article->toArray());
			}
			$this->setHttpStatus($responseStatus);
		}
		catch (\Exception $e) {
			$this->response->setData(['message' => $e->getMessage()]);
			$this->setHttpStatus(HTTPStatus::HTTP_STATUS_NO_CONTENT);
		};
		$this->respond();
	}

	/**
	 *
	 */
	public function getArticles() {
		$this->app->getLog()->info("this is good");
		$articles = $this->helper->findArticles();
		$this->setHttpStatus(($articles) ? HTTPStatus::HTTP_STATUS_OK : HTTPStatus::HTTP_STATUS_NO_CONTENT);
		$this->response->setData($articles->toArray());
		$this->respond();
	}

	public function createArticle() {
		try {
			$allPostVar = $this->app->request->post();
			$article = new ArticleRequest();
			$article->loadFromAPI($allPostVar);
			$status = $this->helper->saveArticle($article);
			$responseStatus = HTTPStatus::HTTP_STATUS_NOT_ACCEPTABLE;
			if ($status) {
				$responseStatus = HTTPStatus::HTTP_STATUS_CREATED;
				$this->response->setData(['message' => 'created sucessfully']);
			}
			$this->setHttpStatus($responseStatus);
		}
		catch (\Exception $e) {
			$this->response->setData(['message' => $e->getMessage()]);
			$this->setHttpStatus(HTTPStatus::HTTP_STATUS_BAD_GATEWAY);
		};
		$this->respond();
	}

	public function updateArticle() {
		try {
			$put = $this->app->request->put();
			$get = $this->app->router->getCurrentRoute()->getParams();
			$data = array_merge($get, $put);
			$model = new ArticleRequest();
			$model->loadFromAPI($data);

			$response = $this->helper->updateArticle($model);

			$responseStatus = HTTPStatus::HTTP_STATUS_NOT_FOUND;
			if ($response) {
				$responseStatus = HTTPStatus::HTTP_STATUS_OK;
				$this->response->setData(['message' => 'updated sucessfully']);
			}
			$this->setHttpStatus($responseStatus);
		}
		catch (\Exception $e) {
			$this->response->setData(['message' => $e->getMessage()]);
			$this->setHttpStatus(HTTPStatus::HTTP_STATUS_NOT_ACCEPTABLE);
		};
		$this->respond();
	}

	public function deleteArticle() {
		try {
			$allPostVar = $this->app->router->getCurrentRoute()->getParams();
			$articleId = $allPostVar['id'];
			$response = $this->helper->deleteArticle($articleId);
			$responseStatus = HTTPStatus::HTTP_STATUS_NOT_FOUND;
			if ($response) {
				$responseStatus = HTTPStatus::HTTP_STATUS_OK;
				$this->response->setData(['message' => 'updated sucessfully']);
			}
			$this->setHttpStatus($responseStatus);
		}
		catch (\Exception $e) {
			$this->response->setData(['message' => $e->getMessage()]);
			$this->setHttpStatus(HTTPStatus::HTTP_STATUS_NOT_ACCEPTABLE);
		}
		$this->respond();
	}

	public function findDiff() {
		$oldVersion = JsonData::getArray1();
		$newVersion = JsonData::getArray2();
		$flag = $this->app->router->getCurrentRoute()->getParam('flag');

		if ($flag == 1) {
			$differ = new MapDiffer();
			$diff = $differ->doDiff($oldVersion, $newVersion);
			$diff = PitchVisionUtils::objectToArray($diff);
		}
		else {
			$diff = PitchVisionUtils::arrayRecursiveDiff($newVersion, $oldVersion);
		}
		$response = (array)$diff;
		$this->setHttpStatus(200);
		$this->response->setData($response);
		$this->respond();
	}

	public function createDiff() {
		$json1 = $this->app->request->post('json1');
		$json2 = $this->app->request->post('json2');
		try {
			$array1 = GuzzleHttp\json_decode($json1, true);
			$array2 = GuzzleHttp\json_decode($json2, true);
			$treeWalker = new TreeWalker([
				"debug" => false,                      //true => return the execution time, false => not
				"returntype" => "array"                //Returntype = ["obj","jsonstring","array"]
			]);
			$diff = $treeWalker->getdiff($array2, $array1, false);
			$formattedDiff = $treeWalker->parseDifference($diff);
			$this->response->setData($formattedDiff);
			$this->setHttpStatus(HTTPStatus::HTTP_STATUS_OK);
		}
		catch (\Exception $e) {
			$this->response->setData(['message' => $e->getMessage()]);
			$this->setHttpStatus(HTTPStatus::HTTP_STATUS_BAD_REQUEST);
		}
		$this->respond();
	}
}